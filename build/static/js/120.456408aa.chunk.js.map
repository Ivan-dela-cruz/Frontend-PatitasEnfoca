{"version":3,"sources":["views/dashboard/components/Form.js","views/dashboard/components/FilterButton.js","views/dashboard/components/Todo.js","../node_modules/nanoid/index.browser.js","views/dashboard/App.js","views/dashboard/AppIndex.js"],"names":["Form","props","useState","name","setName","console","log","onSubmit","e","preventDefault","trim","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","onClick","prompt","myAge","alert","FilterButton","aria-pressed","isPressed","setFilter","Todo","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","permisos","tasks","setTasks","filter","updatedTasks","map","remainingTasks","tasrid","editedTaskList","taskList","key","filterList","tasksNoun","length","headingText","listHeadingRef","prevTaskLength","newTask","tabIndex","role","aria-labelledby","DATA","nombre","a","i","num","indexOf","duplicateb","result","finalResult","toFixed","finalNumber","AppIndex","Fragment","React","Component"],"mappings":"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","file":"static/js/120.456408aa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n\r\n\r\nfunction Form(props) {\r\n  const [name, setName] = useState('INTERESANTE');\r\n\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!name.trim()) {\r\n      return;\r\n    }\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n\r\n  function handleChange(e) {\r\n      console.log(e.target.value);\r\n    setName(e.target.value);\r\n  }\r\n\r\n  function paraButtonCLick(){\r\n    let myName=\"Andres Piedra\";\r\n    let myAge;\r\n    let name = prompt('What is your name?'+myName +\" Cuya edad ahora es de  \"+myAge);\r\n    alert('Hello ' + name + ', nice to see you!');\r\n  }\r\n\r\n  let myAge=null;\r\n\r\n  const myhu= \"andres\";\r\n\r\n\r\n  let dolphinGoodbye = \"So long and thanks for all the fish\";\r\n\r\n\r\n  console.log(dolphinGoodbye);\r\n\r\n  let dog = { name : 'Spot', breed : 'Dalmatian' };\r\n\r\n  \r\n  console.log(dog.name);\r\n\r\n  console.log(typeof myAge);\r\n\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n        Escriba las tareas que se van agregar por favor \r\n        </label>\r\n      </h2>\r\n\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg\"\r\n        name=\"text\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n        Agregar\r\n      </button>\r\n      <button type=\"button\" className=\"btn btn__primary btn__lg\" onClick={paraButtonCLick}>\r\n        Accion Agregada\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default function Todo(props) {\r\n  \r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState('');\r\n\r\n  const editFieldRef = useRef(null);\r\n  const editButtonRef = useRef(null);\r\n\r\n  const wasEditing = usePrevious(isEditing);\r\n\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!newName.trim()) {\r\n      return;\r\n    }\r\n    props.editTask(props.id, newName);\r\n    setNewName(\"\");\r\n    setEditing(false);\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input\r\n          id={props.id}\r\n          className=\"todo-text\"\r\n          type=\"text\"\r\n          value={newName}\r\n          onChange={handleChange}\r\n          ref={editFieldRef}\r\n        />\r\n      </div>\r\n      <div className=\"btn-group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn todo-cancel\"\r\n          onClick={() => setEditing(false)}\r\n        >\r\n          Cancel\r\n          <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n          Save\r\n          <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div className=\"c-cb\">\r\n          <input\r\n            id={props.id}\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n          />\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n          </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn\"\r\n          onClick={() => setEditing(true)}\r\n          ref={editButtonRef}\r\n          >\r\n            Edit <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn__danger\"\r\n            onClick={() => props.deleteTask(props.id)}\r\n          >\r\n            Delete <span className=\"\">{props.name}</span>\r\n          </button>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    if (!wasEditing && isEditing) {\r\n      editFieldRef.current.focus();\r\n    }\r\n    if (wasEditing && !isEditing) {\r\n      editButtonRef.current.focus();\r\n    }\r\n  }, [wasEditing, isEditing]);\r\n\r\n\r\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID. If you use Expo, install `expo-random` ' +\n        'and use `nanoid/async`.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Form from \"./components/Form\";\r\nimport FilterButton from \"./components/FilterButton\";\r\nimport Todo from \"./components/Todo\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Row, Col } from \"reactstrap\"\r\n\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n\r\nconst FILTER_MAP = {\r\n    All: () => true,\r\n    Active: task => !task.completed,\r\n    Completed: task => task.completed\r\n};\r\n\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction App(props) {\r\n\r\n    console.log(1);\r\n    const [permisos, setPermisos] = useState(props.permisos);\r\n    const [tasks, setTasks] = useState(props.tasks);\r\n    const [filter, setFilter] = useState('All');\r\n\r\n    function toggleTaskCompleted(id) {\r\n\r\n        const updatedTasks = tasks.map(task => {\r\n            // if this task has the same ID as the edited task\r\n            if (id === task.id) {\r\n                // use object spread to make a new obkect\r\n                // whose `completed` prop has been inverted\r\n                return { ...task, completed: !task.completed }\r\n            }\r\n            return task;\r\n        });\r\n        setTasks(updatedTasks);\r\n    }\r\n\r\n    console.log(2);\r\n    function deleteTask(id) {\r\n        const remainingTasks = tasks.filter(  function filtrarPorId(tasrid){\r\n           return id!==tasrid.id; \r\n        });\r\n        setTasks(remainingTasks);\r\n    }\r\n\r\n    function editTask(id, newName) {\r\n        const editedTaskList = tasks.map(task => {\r\n            // if this task has the same ID as the edited task\r\n            if (id === task.id) {\r\n                //\r\n                return { ...task, name: newName }\r\n            }\r\n            return task;\r\n        });\r\n        setTasks(editedTaskList);\r\n    }\r\n\r\n    const taskList = tasks\r\n        .filter(FILTER_MAP[filter])\r\n        .map(task => (\r\n            <Todo\r\n                id={task.id}\r\n                name={task.name}\r\n                completed={task.completed}\r\n                key={task.id}\r\n                toggleTaskCompleted={toggleTaskCompleted}\r\n                deleteTask={deleteTask}\r\n                editTask={editTask}\r\n            />\r\n        ));\r\n\r\n    const filterList = FILTER_NAMES.map(name => (\r\n        <FilterButton\r\n            key={name}\r\n            name={name}\r\n            isPressed={name === filter}\r\n            setFilter={setFilter}\r\n        />\r\n    ));\r\n\r\n    function addTask(name) {\r\n        const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\r\n        setTasks([...tasks, newTask]);\r\n    }\r\n\r\n    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\r\n    const headingText = `${taskList.length} ${tasksNoun} remaining`;\r\n    const listHeadingRef = useRef(null);\r\n    const prevTaskLength = usePrevious(tasks.length);\r\n\r\n    useEffect(() => {\r\n        if (tasks.length - prevTaskLength === -1) {\r\n            listHeadingRef.current.focus();\r\n        }\r\n    }, [tasks.length, prevTaskLength]);\r\n\r\n    console.log(3);\r\n\r\n    return (\r\n                <div className=\"todoapp stack-large\">\r\n                  <Form addTask={addTask} />\r\n                    <div className=\"filters btn-group stack-exception\">\r\n                        {filterList}\r\n                    </div>\r\n                    <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\r\n                        {headingText}\r\n                    </h2>\r\n                    <ul\r\n                        role=\"list\"\r\n                        className=\"todo-list stack-large stack-exception\"\r\n                        aria-labelledby=\"list-heading\"\r\n                    >\r\n                        {taskList}\r\n                    </ul> \r\n                </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { array } from 'prop-types';\r\n\r\nconst DATA = [\r\n  { id: \"todo-0\", name: \"Eat\", completed: true },\r\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\r\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\r\n];\r\n\r\n\r\nconst permisos = [\r\n    { id: \"1\", nombre: \"Empresa Giller\", completed: true },\r\n    { id: \"2\", name: \"Empresa Andrade\", completed: false },\r\n    { id: \"3\", name: \"Empresa Carlos\", completed: false }\r\n  ];\r\n\r\n  let myInt = 5;\r\n  let myFloat = 6.667;\r\n  //console.log(myInt+myFloat);\r\n\r\n  //console.log(\"Aumentadores\");\r\n  let num1=100;\r\n  //console.log(num1++)\r\n  //.log(num1++)\r\n\r\n  let x=50;\r\n  x*=4;\r\n   // console.log(\"Remainder\")\r\n//console.log(x);\r\n\r\nlet y;\r\n//y=(457-7)/3\r\ny=50*3;\r\ny+=50;\r\n//console.log(\"Remainder y\")\r\n//console.log(y);\r\n\r\n\r\n/// exam \r\nlet a=[2,1,3,5,3,2];\r\n\r\n//cojo el numero de indice 0\r\n//luego busco ese numero si es ducplicado le ingreso en un array \r\n//y guardo el indice en otro array\r\n\r\nfunction duplicateb(a){\r\n  for(let i=0; i<a.length; i++){\r\n   const  num=a[i];\r\n   if(a.indexOf(num)!==i) return num;\r\n  }\r\n  return -1\r\n};\r\n\r\n\r\n\r\n\r\nfunction duplicate(a){\r\nlet arregloduplicados=[];\r\nlet arregloindices=[];\r\n\r\nfor(let i=0; i<a.length; i++){\r\nlet u=a[i];\r\n//console.log(u);\r\n  for(let h=i+1; h<a.length;  h++ ){\r\n     if(u===a[h]){\r\n      arregloduplicados.push(u);\r\n      arregloindices.push(h);\r\n     }\r\n  }   \r\n}\r\n\r\nif(arregloduplicados.length===0){\r\n\r\nreturn -1;\r\n \r\n}else{\r\n\r\nconsole.log(arregloduplicados);\r\nconsole.log(arregloindices);\r\nlet min=arregloindices[0];\r\nlet indicemenor=0;\r\nfor(let i=1; i<arregloindices.length; i++){\r\n if(min>arregloindices[i]){\r\n    min=arregloindices[i];\r\n    indicemenor=i;\r\n }\r\n}\r\nreturn  arregloduplicados[indicemenor];\r\n}\r\n\r\n}\r\nconsole.log('------');\r\nconsole.log(duplicateb(a));\r\nconsole.log('------');\r\n\r\n\r\nlet result = 1042;\r\nlet result2 = 0.01\r\nresult=result* result2;\r\nlet finalResult = result.toFixed(2);\r\nconsole.log(finalResult);\r\nconsole.log(typeof finalResult );\r\nlet finalNumber= finalResult*1;\r\nconsole.log(typeof finalNumber );\r\n\r\n\r\n\r\nclass AppIndex extends React.Component {\r\n    render() {\r\n      return (\r\n    <React.Fragment>\r\n    <App tasks={DATA} permisos={permisos}/>\r\n    </React.Fragment>\r\n    )\r\n}\r\n}\r\n\r\nexport default AppIndex\r\n"],"sourceRoot":""}